Index: Practice/practice_5/game_components/lives.py
===================================================================
diff --git a/Practice/practice_5/game_components/lives.py b/Practice/practice_5/game_components/lives.py
deleted file mode 100644
--- a/Practice/practice_5/game_components/lives.py	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
+++ /dev/null	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
@@ -1,2 +0,0 @@
-def live(attempts):
-    return 'üéî'*attempts
\ No newline at end of file
Index: Practice/practice_5/game_components/__init__.py
===================================================================
diff --git a/Practice/practice_5/game_components/__init__.py b/Practice/practice_5/game_components/__init__.py
deleted file mode 100644
--- a/Practice/practice_5/game_components/__init__.py	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
+++ /dev/null	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
@@ -1,2 +0,0 @@
-from .coded_word import coded
-from .lives import live
\ No newline at end of file
Index: Practice/practice_5/game_components/coded_word.py
===================================================================
diff --git a/Practice/practice_5/game_components/coded_word.py b/Practice/practice_5/game_components/coded_word.py
deleted file mode 100644
--- a/Practice/practice_5/game_components/coded_word.py	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
+++ /dev/null	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
@@ -1,3 +0,0 @@
-def coded(word, guessed_letters):
-    displayed = ' '.join(letter if letter in guessed_letters else '‚ñ†' for letter in word)
-    return displayed
\ No newline at end of file
Index: Practice/practice_5/main.py
===================================================================
diff --git a/Practice/practice_5/main.py b/Practice/practice_5/main.py
deleted file mode 100644
--- a/Practice/practice_5/main.py	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
+++ /dev/null	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
@@ -1,77 +0,0 @@
-from game_components import *
-from words import *
-
-print('–≠—Ç–æ –ü–æ–ª–µ –ß—É–¥–µ—Å! –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!')
-
-def start_game():
-    word = rand_word()
-    guessed_letters = set()
-    record = 0
-    print(
-        '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ \n1. –õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: 7 –∂–∏–∑–Ω–µ–π\n2. –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: 5 –∂–∏–∑–Ω–µ–π.\n3. –°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: 3 –∂–∏–∑–Ω–∏.\n(–ù–∞–ø–∏—à–∏—Ç–µ 1, 2 –∏–ª–∏ 3) \n–í–∞—à –≤—ã–±–æ—Ä: ')
-
-    difficult = input()
-    while not difficult.isdigit() or difficult not in ['1', '2', '3']:
-        print('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1, 2 –∏–ª–∏ 3! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
-        difficult = input()
-
-    attempts = {'1': 7, '2': 5, '3': 3}[difficult]
-
-    while attempts > 0:
-        print(f'–°–ª–æ–≤–æ: {coded(word, guessed_letters)}')
-        print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π: {live(attempts)}')
-
-        letter_choice = input('–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ —Ü–µ–ª–∏–∫–æ–º: ').lower()
-
-        if not letter_choice.isalpha():
-            print('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ —Ü–µ–ª–∏–∫–æ–º!')
-            continue
-
-        if letter_choice in guessed_letters:
-            print('–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É –±—É–∫–≤—É!')
-            continue
-
-        if letter_choice == word:
-            print(f'\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ {word}! –ü—Ä–∏–∑ –≤ —Å—Ç—É–¥–∏—é!')
-            record += 1
-            save_record(record)
-
-            user_choice = input(
-                f'–í–∞—à —Ä–µ–∫–æ—Ä–¥: {record}! \n–ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–π—Ç–∏ –¥–∞–ª—å—à–µ? \n(–ù–∞–ø–∏—à–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç) \n–í–∞—à –≤—ã–±–æ—Ä: ').lower()
-            while user_choice not in ['–¥–∞', '–Ω–µ—Ç']:
-                print('–í–≤–µ–¥–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
-                user_choice = input('–í–∞—à –≤—ã–±–æ—Ä: ').lower()
-
-            if user_choice == '–¥–∞':
-                word = rand_word()
-                guessed_letters.clear()
-                attempts = {'1': 7, '2': 5, '3': 3}[difficult]
-            else:
-                break
-        elif len(letter_choice) == 1:
-            guessed_letters.add(letter_choice)
-            if letter_choice in word:
-                print(f'–í—ã —É–≥–∞–¥–∞–ª–∏ –±—É–∫–≤—É: {letter_choice}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!')
-            else:
-                print('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
-                attempts -= 1
-        else:
-            print('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
-            attempts -= 1
-
-    else:
-        print(f'\n–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ: {word}')
-
-def save_record(record):
-    try:
-        with open('record.txt', mode='r', encoding='utf8') as file:
-            current_record = int(file.read().strip())
-    except (FileNotFoundError, ValueError):
-        current_record = 0
-
-    if record > current_record:
-        with open('record.txt', mode='w', encoding='utf8') as file:
-            file.write(str(record))
-        print('–í–∞—à —Ä–µ–∫–æ—Ä–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω!')
-
-start_game()
Index: Practice/practice_5/words/random_word.py
===================================================================
diff --git a/Practice/practice_5/words/random_word.py b/Practice/practice_5/words/random_word.py
deleted file mode 100644
--- a/Practice/practice_5/words/random_word.py	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
+++ /dev/null	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
@@ -1,7 +0,0 @@
-import random
-
-with open('word list.txt', encoding='utf-8') as file:
-    words = file.read().split(' ')
-
-def rand_word():
-    return random.choice(words)
Index: Practice/practice_5/word list.txt
===================================================================
diff --git a/Practice/practice_5/word list.txt b/Practice/practice_5/word list.txt
deleted file mode 100644
--- a/Practice/practice_5/word list.txt	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
+++ /dev/null	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
@@ -1,1 +0,0 @@
-–∫–æ—à–∫–∞ —Å—Ç–æ–ª –º–∞–Ω–¥–∞—Ä–∏–Ω –∑–æ–Ω—Ç –∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∏–∂–∫–∞ –≤–∞—Ä–µ–Ω—å–µ –ø–ª–∞–Ω–µ—Ç–∞ —Ä—é–∫–∑–∞–∫ –æ—Å–µ–Ω—å –ø–∞–ø–∞ —Å–µ–∫—Ä–µ—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥ —Ä–∞–¥–æ—Å—Ç—å –ø–µ—Å–æ–∫ —á–∞–π–Ω–∏–∫ –∑–∞–≤—Ç—Ä–∞–∫ –≥–æ—Ä—ã —Å–æ–±–∞–∫–∞ –æ–∫–Ω–∞ –º–µ—á—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ª–µ—Ç–æ –¥–æ–∂–¥—å –¥–µ–Ω—å–≥–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –∂–∏–≤–æ—Ç–Ω–æ–µ —Ä–µ–∫–∞ –ø–æ–≥–æ–¥–∞ –º–µ–±–µ–ª—å —Å–Ω–µ–≥ —Ñ—É—Ç–±–æ–ª —É–ª–∏—Ü–∞ –ø–µ—Ä–µ—Ü —Å—Ç–µ–Ω–∞ –±–µ—Ä–µ–≥ –º–æ—Ä–µ –≥–æ—Ä–æ–¥ —à–ª—è–ø–∞ –¥–æ–º —à–ª–µ–º —É–ª–∏—Ü–∞ —à–ª—è–ø–∞
\ No newline at end of file
Index: Practice/practice_5/__init__.py
===================================================================
diff --git a/Practice/practice_5/__init__.py b/Practice/practice_5/__init__.py
deleted file mode 100644
--- a/Practice/practice_5/__init__.py	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
+++ /dev/null	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
@@ -1,1 +0,0 @@
-__all__ = ['game_components', 'words']
\ No newline at end of file
Index: Practice/practice_5/record.txt
===================================================================
diff --git a/Practice/practice_5/record.txt b/Practice/practice_5/record.txt
deleted file mode 100644
--- a/Practice/practice_5/record.txt	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
+++ /dev/null	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
@@ -1,1 +0,0 @@
-1
\ No newline at end of file
Index: Practice/practice_5/words/__init__.py
===================================================================
diff --git a/Practice/practice_5/words/__init__.py b/Practice/practice_5/words/__init__.py
deleted file mode 100644
--- a/Practice/practice_5/words/__init__.py	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
+++ /dev/null	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
@@ -1,1 +0,0 @@
-from .random_word import rand_word
\ No newline at end of file
Index: Practice/Practice_6/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from feature import Feature\nfrom utils.render import ConsoleRender\nfrom user import User\nimport os\n\nfunctions = {\n    \"0\": lambda feature: feature.change_directory(),\n    \"1\": lambda feature: feature.convert_to_docx(),\n    \"2\": lambda feature: feature.convert_to_pdf(),\n    \"3\": lambda feature: feature.compress_image(),\n    \"4\": lambda feature: feature.delete_group_files()\n}\n\noptions = [\n    '–°–º–µ–Ω–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥',\n    '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å PDF -> Docx',\n    '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Docx -> PDF',\n    '–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',\n    '–£–¥–∞–ª–∏—Ç—å —Ü–µ–ø–æ—á–∫—É —Ñ–∞–π–ª–æ–≤',\n    '–í—ã—Ö–æ–¥'\n]\nuser_instance = User(os.getcwd())\nexecutor = Feature(user_instance)\n\nConsoleRender.render_line('\\n'.join([f\"{index}. {option}\" for index, option in enumerate(options[:5])]))\n\nwhile True:\n    task = user_instance.select(functions)[1]\n    if task:\n        task(executor)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Practice/Practice_6/main.py b/Practice/Practice_6/main.py
--- a/Practice/Practice_6/main.py	(revision a65aa176b55bd64bfd6a504a3c0dde9575fc6364)
+++ b/Practice/Practice_6/main.py	(date 1734611169530)
@@ -8,7 +8,8 @@
     "1": lambda feature: feature.convert_to_docx(),
     "2": lambda feature: feature.convert_to_pdf(),
     "3": lambda feature: feature.compress_image(),
-    "4": lambda feature: feature.delete_group_files()
+    "4": lambda feature: feature.delete_group_files(),
+    "5": lambda feature: exit()  # –î–æ–±–∞–≤–∏–º –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
 }
 
 options = [
@@ -19,12 +20,17 @@
     '–£–¥–∞–ª–∏—Ç—å —Ü–µ–ø–æ—á–∫—É —Ñ–∞–π–ª–æ–≤',
     '–í—ã—Ö–æ–¥'
 ]
+
 user_instance = User(os.getcwd())
 executor = Feature(user_instance)
 
-ConsoleRender.render_line('\n'.join([f"{index}. {option}" for index, option in enumerate(options[:5])]))
+ConsoleRender.render_line('\n'.join([f"{index}. {option}" for index, option in enumerate(options)]))
 
 while True:
-    task = user_instance.select(functions)[1]
-    if task:
-        task(executor)
+    task_choice = user_instance.select(functions)  # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
+    if task_choice:
+        task = task_choice[1]
+        try:
+            task(executor)
+        except Exception as e:
+            ConsoleRender.render_line(f"–û—à–∏–±–∫–∞: {str(e)}")
\ No newline at end of file
Index: Practice/practice_8/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Practice/practice_8/main.py b/Practice/practice_8/main.py
new file mode 100644
--- /dev/null	(date 1734602725663)
+++ b/Practice/practice_8/main.py	(date 1734602725663)
@@ -0,0 +1,56 @@
+import re
+import spacy
+from collections import Counter
+from translate import Translator
+
+# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
+nlp = spacy.load('xx_ent_wiki_sm')
+translator = Translator(to_lang="en")
+
+# –®–∞–≥ 1: –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
+def read_text(file_path):
+    with open(file_path, 'r', encoding='utf-8') as file:
+        return file.read()
+
+# –®–∞–≥ 2: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤ (–ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è)
+def normalize_words(text):
+    doc = nlp(text)
+    return [token.lemma_ for token in doc if not token.is_stop and not token.is_punct]
+
+# –®–∞–≥ 3: –ü–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–ª–æ–≤
+def count_words(words):
+    return Counter(words)
+
+# –®–∞–≥ 4: –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
+def translate_words(word_counts):
+    translated_dict = {}
+    for word, count in word_counts.items():
+        try:
+            translated_word = translator.translate(word)
+            translated_dict[translated_word] = count
+        except Exception as e:
+            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–ª–æ–≤–∞ '{word}': {e}")
+            translated_dict[word] = count
+    return translated_dict
+
+# –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
+def save_results(word_dict, output_file):
+    with open(output_file, 'w', encoding='utf-8') as file:
+        for word, count in word_dict.items():
+            file.write(f"{word}: {count}\n")
+
+# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å
+def main(input_file, output_file):
+    text = read_text(input_file)
+    normalized_words = normalize_words(text)
+    word_counts = count_words(normalized_words)
+    sorted_word_counts = dict(sorted(word_counts.items(), key=lambda x: -x[1]))
+    translated_word_counts = translate_words(sorted_word_counts)
+    save_results(translated_word_counts, output_file)
+    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
+
+# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
+input_file_path = 'chat.txt'  # –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
+output_file_path = 'output_results.txt'  # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
+
+main(input_file_path, output_file_path)
